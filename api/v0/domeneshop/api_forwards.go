/*
 * Domeneshop API Documentation
 *
 * # Overview  Domeneshop offers a simple, REST-based API, which currently supports the following features:  - List domains - List invoices - Create, read, update and delete DNS records for domains - Create, read, update and delete HTTP forwards (\"WWW forwarding\") for domains - Dynamic DNS (DDNS) update endpoints for use in consumer routers  More features are planned, including:  - Web hosting administration - Email address and email user/account administration  # Testing period  The API service is in version 0, which means it is possible that the interface will change rapidly during the testing period. For that reason, **the documentation on these pages may sometimes be outdated.**  Additionally, we make no guarantees about the stability of the API service during this testing period, and therefore ask customers to be careful with using the service for business critical purposes.  # Authentication  The Domeneshop API currently supports only one method of authentication, **HTTP Basic Auth**. More authentication methods may be added in the future.  To generate credentials, visit <a href=\"https://www.domeneshop.no/admin?view=api\" target=\"_blank\">this page</a> after logging in to the control panel on our website:  <a href=\"https://www.domeneshop.no/admin?view=api\" target=\"_blank\">https://www.domeneshop.no/admin?view=api</a>  # Libraries  Domeneshop maintains multiple API libraries to simplify using the API. Please note that these libraries have the same stability guarantees to the API while the API is in version 0.  The libraries may be found in our [Github repository](https://github.com/domeneshop/).  Domeneshop also maintains a plugin for [EFF's Certbot](https://certbot.eff.org/), which automates issuance and renewal of SSL-certificates on your own servers for domains that use Domeneshop's DNS service. This plugin is found in our Github repository [here](https://github.com/domeneshop/certbot-dns-domeneshop).  <SecurityDefinitions /> 
 *
 * API version: v0
 * Contact: kundeservice@domeneshop.no
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ForwardsApiService ForwardsApi service
type ForwardsApiService service

type ApiDomainsDomainIdForwardsGetRequest struct {
	ctx _context.Context
	ApiService *ForwardsApiService
	domainId int32
}


func (r ApiDomainsDomainIdForwardsGetRequest) Execute() ([]HTTPForward, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.DomainsDomainIdForwardsGetExecute(r)
}

/*
 * DomainsDomainIdForwardsGet List forwards
 * List all forwards for the specified domain.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param domainId ID of the domain
 * @return ApiDomainsDomainIdForwardsGetRequest
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsGet(ctx _context.Context, domainId int32) ApiDomainsDomainIdForwardsGetRequest {
	return ApiDomainsDomainIdForwardsGetRequest{
		ApiService: a,
		ctx: ctx,
		domainId: domainId,
	}
}

/*
 * Execute executes the request
 * @return []HTTPForward
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsGetExecute(r ApiDomainsDomainIdForwardsGetRequest) ([]HTTPForward, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []HTTPForward
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForwardsApiService.DomainsDomainIdForwardsGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/domains/{domainId}/forwards/"
	localVarPath = strings.Replace(localVarPath, "{"+"domainId"+"}", _neturl.PathEscape(parameterToString(r.domainId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiDomainsDomainIdForwardsHostDeleteRequest struct {
	ctx _context.Context
	ApiService *ForwardsApiService
	domainId int32
	host string
}


func (r ApiDomainsDomainIdForwardsHostDeleteRequest) Execute() (*_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.DomainsDomainIdForwardsHostDeleteExecute(r)
}

/*
 * DomainsDomainIdForwardsHostDelete Delete forward by host
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param domainId ID of the domain
 * @param host Subdomain of the forward, `@` for the root domain
 * @return ApiDomainsDomainIdForwardsHostDeleteRequest
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsHostDelete(ctx _context.Context, domainId int32, host string) ApiDomainsDomainIdForwardsHostDeleteRequest {
	return ApiDomainsDomainIdForwardsHostDeleteRequest{
		ApiService: a,
		ctx: ctx,
		domainId: domainId,
		host: host,
	}
}

/*
 * Execute executes the request
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsHostDeleteExecute(r ApiDomainsDomainIdForwardsHostDeleteRequest) (*_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForwardsApiService.DomainsDomainIdForwardsHostDelete")
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarPath := localBasePath + "/domains/{domainId}/forwards/{host}"
	localVarPath = strings.Replace(localVarPath, "{"+"domainId"+"}", _neturl.PathEscape(parameterToString(r.domainId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host"+"}", _neturl.PathEscape(parameterToString(r.host, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, executionError
}

type ApiDomainsDomainIdForwardsHostGetRequest struct {
	ctx _context.Context
	ApiService *ForwardsApiService
	domainId int32
	host string
}


func (r ApiDomainsDomainIdForwardsHostGetRequest) Execute() (HTTPForward, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.DomainsDomainIdForwardsHostGetExecute(r)
}

/*
 * DomainsDomainIdForwardsHostGet Find forward by host
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param domainId ID of the domain
 * @param host Subdomain of the forward, `@` for the root domain
 * @return ApiDomainsDomainIdForwardsHostGetRequest
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsHostGet(ctx _context.Context, domainId int32, host string) ApiDomainsDomainIdForwardsHostGetRequest {
	return ApiDomainsDomainIdForwardsHostGetRequest{
		ApiService: a,
		ctx: ctx,
		domainId: domainId,
		host: host,
	}
}

/*
 * Execute executes the request
 * @return HTTPForward
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsHostGetExecute(r ApiDomainsDomainIdForwardsHostGetRequest) (HTTPForward, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  HTTPForward
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForwardsApiService.DomainsDomainIdForwardsHostGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/domains/{domainId}/forwards/{host}"
	localVarPath = strings.Replace(localVarPath, "{"+"domainId"+"}", _neturl.PathEscape(parameterToString(r.domainId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host"+"}", _neturl.PathEscape(parameterToString(r.host, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiDomainsDomainIdForwardsHostPutRequest struct {
	ctx _context.Context
	ApiService *ForwardsApiService
	domainId int32
	host string
	hTTPForward *HTTPForward
}

func (r ApiDomainsDomainIdForwardsHostPutRequest) HTTPForward(hTTPForward HTTPForward) ApiDomainsDomainIdForwardsHostPutRequest {
	r.hTTPForward = &hTTPForward
	return r
}

func (r ApiDomainsDomainIdForwardsHostPutRequest) Execute() (HTTPForward, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.DomainsDomainIdForwardsHostPutExecute(r)
}

/*
 * DomainsDomainIdForwardsHostPut Update forward by host
 * Update a forwarding for the specified domain, to a given URL.

The `host` field must not be changed. In that case, delete the
existing forwarding and recreate it for the new host/subdomain.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param domainId ID of the domain
 * @param host Subdomain of the forward, `@` for the root domain
 * @return ApiDomainsDomainIdForwardsHostPutRequest
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsHostPut(ctx _context.Context, domainId int32, host string) ApiDomainsDomainIdForwardsHostPutRequest {
	return ApiDomainsDomainIdForwardsHostPutRequest{
		ApiService: a,
		ctx: ctx,
		domainId: domainId,
		host: host,
	}
}

/*
 * Execute executes the request
 * @return HTTPForward
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsHostPutExecute(r ApiDomainsDomainIdForwardsHostPutRequest) (HTTPForward, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  HTTPForward
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForwardsApiService.DomainsDomainIdForwardsHostPut")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/domains/{domainId}/forwards/{host}"
	localVarPath = strings.Replace(localVarPath, "{"+"domainId"+"}", _neturl.PathEscape(parameterToString(r.domainId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host"+"}", _neturl.PathEscape(parameterToString(r.host, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hTTPForward
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiDomainsDomainIdForwardsPostRequest struct {
	ctx _context.Context
	ApiService *ForwardsApiService
	domainId int32
}


func (r ApiDomainsDomainIdForwardsPostRequest) Execute() (*_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.DomainsDomainIdForwardsPostExecute(r)
}

/*
 * DomainsDomainIdForwardsPost Add forward
 * Create a forwarding for the specified domain, to a given URL.

The forward must not collide with any existing forwarding or DNS record
of types `A`, `AAAA`, `ANAME` or `CNAME`.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param domainId ID of the domain
 * @return ApiDomainsDomainIdForwardsPostRequest
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsPost(ctx _context.Context, domainId int32) ApiDomainsDomainIdForwardsPostRequest {
	return ApiDomainsDomainIdForwardsPostRequest{
		ApiService: a,
		ctx: ctx,
		domainId: domainId,
	}
}

/*
 * Execute executes the request
 */
func (a *ForwardsApiService) DomainsDomainIdForwardsPostExecute(r ApiDomainsDomainIdForwardsPostRequest) (*_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForwardsApiService.DomainsDomainIdForwardsPost")
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarPath := localBasePath + "/domains/{domainId}/forwards/"
	localVarPath = strings.Replace(localVarPath, "{"+"domainId"+"}", _neturl.PathEscape(parameterToString(r.domainId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, executionError
}
